!function(e){function t(a){if(n[a])return n[a].exports;var r=n[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=7)}([function(e,t,n){"use strict";function a(e,t){if(1===arguments.length){for(var n=e[0],r=1;r<e.length;r++)n=a(n,e[r]);return n}for(var s in t)if("class"===s){var i=e[s]||[];e[s]=(Array.isArray(i)?i:[i]).concat(t[s]||[])}else if("style"===s){var i=u(e[s]),o=u(t[s]);e[s]=i+o}else e[s]=t[s];return e}function r(e,t){for(var n,a="",r="",s=Array.isArray(t),u=0;u<e.length;u++)(n=i(e[u]))&&(s&&t[u]&&(n=c(n)),a=a+r+n,r=" ");return a}function s(e){var t="",n="";for(var a in e)a&&e[a]&&d.call(e,a)&&(t=t+n+a,n=" ");return t}function i(e,t){return Array.isArray(e)?r(e,t):e&&"object"==typeof e?s(e):e||""}function u(e){if(!e)return"";if("object"==typeof e){var t="";for(var n in e)d.call(e,n)&&(t=t+n+":"+e[n]+";");return t}return e+="",";"!==e[e.length-1]?e+";":e}function o(e,t,n,a){return!1!==t&&null!=t&&(t||"class"!==e&&"style"!==e)?!0===t?" "+(a?e:e+'="'+e+'"'):("function"==typeof t.toJSON&&(t=t.toJSON()),"string"==typeof t||(t=JSON.stringify(t),n||-1===t.indexOf('"'))?(n&&(t=c(t))," "+e+'="'+t+'"'):" "+e+"='"+t.replace(/'/g,"&#39;")+"'"):""}function l(e,t){var n="";for(var a in e)if(d.call(e,a)){var r=e[a];if("class"===a){r=i(r),n=o(a,r,!1,t)+n;continue}"style"===a&&(r=u(r)),n+=o(a,r,!1,t)}return n}function c(e){var t=""+e,n=v.exec(t);if(!n)return e;var a,r,s,i="";for(a=n.index,r=0;a<t.length;a++){switch(t.charCodeAt(a)){case 34:s="&quot;";break;case 38:s="&amp;";break;case 60:s="&lt;";break;case 62:s="&gt;";break;default:continue}r!==a&&(i+=t.substring(r,a)),r=a+1,i+=s}return r!==a?i+t.substring(r,a):i}function f(e,t,a,r){if(!(e instanceof Error))throw e;if(!("undefined"==typeof window&&t||r))throw e.message+=" on line "+a,e;try{r=r||n(14).readFileSync(t,"utf8")}catch(t){f(e,null,a)}var s=3,i=r.split("\n"),u=Math.max(a-s,0),o=Math.min(i.length,a+s),s=i.slice(u,o).map(function(e,t){var n=t+u+1;return(n==a?"  > ":"    ")+n+"| "+e}).join("\n");throw e.path=t,e.message=(t||"Pug")+":"+a+"\n"+s+"\n\n"+e.message,e}var d=Object.prototype.hasOwnProperty;t.merge=a,t.classes=i,t.style=u,t.attr=o,t.attrs=l;var v=/["&<>]/;t.escape=c,t.rethrow=f},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=n(8),u=(a(i),n(11)),o=a(u),l=function(){function e(t){var n=t.el,a=t.currentUser;r(this,e),this.el=n,this.currentUser=a,this.containerEl=document.createElement("ul"),this.containerEl.className="chat__messages",this.el.appendChild(this.containerEl),this.processedMessages={},this.initEvents()}return s(e,[{key:"on",value:function(e,t){this.el.addEventListener(e,t)}},{key:"updateMessages",value:function(e){var t=this,n=Object.keys(e),a=void 0;n.forEach(function(n){t.processedMessages[n]?a=n:t.insertMessage(n,e[n],a)}),this.scrollToBottom()}},{key:"deleteMessage",value:function(e){if(this.processedMessages[e]){var t=document.getElementById(e);t&&(this.containerEl.removeChild(t),delete this.processedMessages[e])}}},{key:"insertMessage",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(this.processedMessages[e]=!0,n&&this.processedMessages[n]){var a=document.getElementById(n);if(a)return a.insertAdjacentHTML("afterEnd",this.renderItem(e,t)),void(this.processedMessages[n]=!0)}this.containerEl.insertAdjacentHTML("beforeEnd",this.renderItem(e,t))}},{key:"initEvents",value:function(){this.el.addEventListener("click",this.click.bind(this))}},{key:"click",value:function(e){if(e.preventDefault(),"button"===e.target.type){var t=e.target.closest("li.chat__message");if(t&&t.id){var n=new CustomEvent("messageDelete",{detail:{messageId:t.id}});this.el.dispatchEvent(n)}}}},{key:"scrollToBottom",value:function(){this.el.scrollTop=this.el.scrollHeight}},{key:"renderItem",value:function(e,t){return(0,o.default)({id:e,isOwn:this.currentUser.userId===t.userId,username:t.username||this.currentUser.defaultUsername,avatarUrl:t.avatarUrl||this.currentUser.defaultAvatarUrl,date:new Date(t.date),text:t.message})}}]),e}();t.default=l},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=n(9),u=(a(i),n(12)),o=a(u),l=function(){function e(t){var n=t.el;r(this,e),this.el=n,this.initEvents()}return s(e,[{key:"initEvents",value:function(){this.el.addEventListener("submit",this.messageSubmit.bind(this)),this.el.addEventListener("keydown",this.keyDown.bind(this))}},{key:"on",value:function(e,t){this.el.addEventListener(e,t)}},{key:"getMessage",value:function(){this.inputEl||(this.inputEl=this.el.querySelector('[name="message"]'));var e=this.inputEl.value;return this.inputEl.value="",e}},{key:"messageSubmit",value:function(e){e.preventDefault();var t=this.getMessage();if(t){var n=new CustomEvent("messageSubmit",{detail:{message:t}});this.el.dispatchEvent(n)}}},{key:"keyDown",value:function(e){13!==e.which||e.altKey||e.ctrlKey||e.shiftKey||e.metaKey||(e.preventDefault(),this.messageSubmit(e))}},{key:"render",value:function(){this.el.innerHTML=(0,o.default)()}}]),e}();t.default=l},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=n(10),u=(a(i),n(13)),o=a(u),l=function(){function e(t){var n=t.el,a=t.Storage;r(this,e),this.el=n,this.storage=new a,this.initEvents(),this.data={userId:this.storage.getItem("userId")||"anonimous-"+(1e9*Math.random()).toFixed(),username:this.storage.getItem("username"),avatarUrl:this.storage.getItem("avatarUrl")},this.saveUserToStorage()}return s(e,[{key:"initEvents",value:function(){this.el.addEventListener("click",this.click.bind(this)),this.el.addEventListener("submit",this.submit.bind(this))}},{key:"saveUserToStorage",value:function(){this.storage.setItem("userId",this.data.userId),this.data.username?this.storage.setItem("username",this.data.username):this.storage.removeItem("username"),this.data.avatarUrl?this.storage.setItem("avatarUrl",this.data.avatarUrl):this.storage.removeItem("avatarUrl")}},{key:"submit",value:function(e){e.preventDefault(),e.target.classList.contains("user-form")&&e.target.dataset.action&&this[e.target.dataset.action]&&this[e.target.dataset.action](e)}},{key:"click",value:function(e){e.target.classList.contains("toggle")&&e.target.dataset.toggle&&(e.preventDefault(),this.el.querySelector("[name=username]").value=this.username,this.el.querySelector("[name=avatarUrl]").value=this.data.avatarUrl||"",this.el.querySelector(".user .user-form__"+e.target.dataset.toggle).classList.toggle("hidden"),e.target.classList.contains("toggled")&&(e.target.hidden=!0))}},{key:"setAvatar",value:function(e){var t=e.target.querySelector("[name=avatarUrl]");t&&t.value&&(this.data.avatarUrl=t.value),this.saveUserToStorage(),this.render()}},{key:"setUsername",value:function(e){var t=e.target.querySelector("[name=username]");t&&t.value&&(this.data.username=t.value,this.userId=t.value),this.saveUserToStorage(),this.render()}},{key:"render",value:function(){this.el.innerHTML=(0,o.default)(this)}},{key:"userId",get:function(){return this.data.userId},set:function(e){e&&(this.data.userId=e.toLowerCase())}},{key:"username",get:function(){return this.data.username||"Аноним"}},{key:"defaultUsername",get:function(){return"Аноним"}},{key:"avatarUrl",get:function(){return this.data.avatarUrl||"./components/user/noAvatar.jpg"}},{key:"defaultAvatarUrl",get:function(){return"./components/user/noAvatar.jpg"}}]),e}();t.default=l},function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),s=function(){function e(t){a(this,e),this.serverUrl=t}return r(e,[{key:"sendRequest",value:function(e){var t=e.type,n=void 0===t?"GET":t,a=e.path,r=e.data,s=void 0===r?{}:r,i=new XMLHttpRequest;return i.open(n,this.serverUrl+"/"+a,!0),new Promise(function(e,t){i.addEventListener("load",function(){e(JSON.parse(i.responseText))}),i.addEventListener("error",function(e){var n=new Error(e.target.statusText);n.code=e.target.status,t(n)}),i.send(JSON.stringify(s))})}},{key:"getAllMessages",value:function(){return this.sendRequest({path:"messages.json"})}},{key:"getMessage",value:function(e){return this.sendRequest({path:"messages/"+e+".json"})}},{key:"messageUpdate",value:function(e,t){return this.sendRequest({type:"PUT",path:"messages/"+e+".json",data:t})}},{key:"messageAdd",value:function(e){return this.sendRequest({type:"POST",path:"messages.json",data:e})}},{key:"messageDelete",value:function(e){return this.sendRequest({type:"DELETE",path:"messages/"+e+".json"})}}]),e}();t.default=s},function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),s=function(){function e(){a(this,e),this.storage=window.localStorage}return r(e,[{key:"getItem",value:function(e){return this.storage.getItem(e)}},{key:"setItem",value:function(e,t){return this.storage.setItem(e,t)}},{key:"removeItem",value:function(e){return this.storage.removeItem(e)}},{key:"clear",value:function(){return this.storage.clear()}}]),e}();t.default=s},function(e,t){},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),i=n(6),u=(a(i),n(5)),o=a(u),l=n(4),c=a(l),f=n(1),d=a(f),v=n(3),h=a(v),g=n(2),m=a(g),p=new c.default("https://mevlchat.firebaseio.com"),y=function(){function e(t){var n=t.userEl,a=t.messageFormEl,s=t.chatEl;r(this,e),this.user=new h.default({el:n,Storage:o.default}),this.chat=new d.default({el:s,currentUser:this.user}),this.messageForm=new m.default({el:a}),this.initEvents()}return s(e,[{key:"initEvents",value:function(){var e=this;this.messageForm.on("messageSubmit",this.messageSubmit.bind(this)),this.chat.on("messageDelete",this.deleteMessage.bind(this)),document.addEventListener("visibilitychange",function(){"hidden"===document.visibilityState?e.stopIntervalUpdate():e.startIntervalUpdate()})}},{key:"startIntervalUpdate",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3e3;this.intervalUpdate(e)}},{key:"stopIntervalUpdate",value:function(){clearTimeout(this.timerId)}},{key:"intervalUpdate",value:function(e){var t=this;this.updateMessages(),this.timerId=setTimeout(function(){t.intervalUpdate.call(t,e)},e)}},{key:"updateMessages",value:function(){var e=this;p.getAllMessages().then(function(t){e.chat.updateMessages(t)}).catch(function(e){console.log("Error",e)})}},{key:"messageSubmit",value:function(e){var t=this,n={userId:this.user.userId,username:this.user.data.username,avatarUrl:this.user.data.avatarUrl,date:(new Date).getTime(),message:e.detail.message};p.messageAdd(n).then(function(){t.updateMessages()}).catch(function(e){console.log("Error",e)})}},{key:"deleteMessage",value:function(e){var t=this,n=e.detail.messageId;p.messageDelete(n).then(function(){t.chat.deleteMessage(n)}).catch(function(e){console.log("Error",e)})}},{key:"render",value:function(){this.user.render(),this.messageForm.render(),this.startIntervalUpdate()}}]),e}();window.App=y},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){function a(e){var t,n="",a=e||{};return function(e,a,s,i,u,o){n=n+"<li"+(r.attr("class",r.classes(["chat__message",i?"chat__message_own":""],[!1,!0]),!1,!0)+r.attr("id",s,!0,!0))+'><div class="chat__message_avatar"><img'+(r.attr("src",e,!0,!0)+r.attr("alt",o,!0,!0))+'></div><div class="chat__message_header"><span class="chat__message_author">'+r.escape(null==(t=o)?"":t)+'</span><input class="chat__message_button" type="button" value="x"><span class="chat__message_date">'+r.escape(null==(t=a.toLocaleString("ru",{hour:"2-digit",minute:"2-digit"}))?"":t)+'</span></div><div class="chat__message_text">'+r.escape(null==(t=u)?"":t)+"</div></li>"}.call(this,"avatarUrl"in a?a.avatarUrl:"undefined"!=typeof avatarUrl?avatarUrl:void 0,"date"in a?a.date:"undefined"!=typeof date?date:void 0,"id"in a?a.id:"undefined"!=typeof id?id:void 0,"isOwn"in a?a.isOwn:"undefined"!=typeof isOwn?isOwn:void 0,"text"in a?a.text:"undefined"!=typeof text?text:void 0,"username"in a?a.username:"undefined"!=typeof username?username:void 0),n}var r=n(0);e.exports=a},function(e,t,n){function a(e){var t="";return t+='<form class="message-form"><textarea class="message-form__input" name="message" placeholder="Сообщение..."></textarea><input class="button message-form__button input_button" type="submit" value="&gt;"></form>'}n(0);e.exports=a},function(e,t,n){function a(e){var t,n="",a=e||{};return function(e,a){n=n+'<div class="user"><h1 class="user__username toggle toggled" data-toggle="username">'+r.escape(null==(t=a)?"":t)+'</h1><form class="user-form user-form__username hidden" data-action="setUsername"><input class="user__input user__input_username" name="username" placeholder="Укажите имя"><input class="button user__input_button input_button" type="submit" value="&gt;"></form><form class="user-form user-form__avatar hidden" data-action="setAvatar"><input class="user__input user__input_avatar" name="avatarUrl" placeholder="URL аватары"><input class="button user__input_button input_button" type="submit" value="&gt;"></form><figure class="user__avatar"><img class="toggle" data-toggle="avatar"'+r.attr("src",e,!0,!0)+r.attr("alt",a,!0,!0)+"></figure></div>"}.call(this,"avatarUrl"in a?a.avatarUrl:"undefined"!=typeof avatarUrl?avatarUrl:void 0,"username"in a?a.username:"undefined"!=typeof username?username:void 0),n}var r=n(0);e.exports=a},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,